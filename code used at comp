/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

//All code is important, do not delete!

package org.usfirst.frc.team3352.robot;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.DoubleSolenoid;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.SpeedControllerGroup;
import edu.wpi.first.wpilibj.Timer;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/*****************************************************************************
 * ***************************************************************************
 * What Works:
 * Drive
 * Intake
 * Climb
 * Lift
 * Pneumatics
 * Deadzones
 * 
 * 
 * 
 * What Doesn't:
 * 
 * 
 * Untested:
 * literally everything.
 * 
 * 
 * Notes:
 * This should work
 * 
 * Things that need to be done:
 * Auto
 * 
 * 
 *****************************************************************************
 ****************************************************************************/


public class Robot extends IterativeRobot {
	
	private DifferentialDrive m_myRobot;
	Joystick driveStick = new Joystick(0);      
	Joystick operatorStick = new Joystick(1);
	
	   /*********************************************
	    * auto chooser
	    ********************************************/
		final String defaultAuto = "Default";
		final String customAuto = "My Auto";
		String autoSelected;
		SendableChooser<String> chooser = new SendableChooser<>();

	   /*********************************************
	    * variables
	    ********************************************/
		double valve1 = 0;
		double valve2 = 0;
		double leftDrive;
		double rightDrive;
		double autoRun = 0;
		int I = 0;
		Compressor c = new  Compressor(0);
		boolean pressureSwitch = c.getPressureSwitchValue();
		double leftOut = 0;
		double rightOut = 0;
		double intakeLeft = 0;
		double intakeRight = 0;
	   /*********************************************
	    * pneumatics
	    ********************************************/
	DoubleSolenoid exampleDouble = new DoubleSolenoid(1, 2);
	
	   /*********************************************
	    * lift/intake
	    ********************************************/
	   WPI_TalonSRX m_intakeR = new WPI_TalonSRX(9);
	   WPI_TalonSRX m_intakeL = new WPI_TalonSRX(8);
	   WPI_TalonSRX m_lift = new WPI_TalonSRX(10);
	   WPI_TalonSRX m_climb = new WPI_TalonSRX(7);
	  
	   
	   /*********************************************
	    * Right Side
	    ********************************************/
	   WPI_TalonSRX m_frontleft = new WPI_TalonSRX(1);
	   WPI_TalonSRX m_midleft = new WPI_TalonSRX(2);
	   WPI_TalonSRX m_rearleft = new WPI_TalonSRX(3);
	  
	   /*********************************************
	    * Left Side
	    ********************************************/
	   WPI_TalonSRX m_frontright = new WPI_TalonSRX(4);
	   WPI_TalonSRX m_midright = new WPI_TalonSRX(5);
	   WPI_TalonSRX m_rearright = new WPI_TalonSRX(6);
	   
	   /*********************************************
	    * speed controller groups
	    ********************************************/
	   SpeedControllerGroup m_right = new SpeedControllerGroup(m_frontright, m_rearright, m_midright);
	   SpeedControllerGroup m_left = new SpeedControllerGroup(m_frontleft, m_rearleft, m_midleft);
	  
	   int autoDriveCount = 0;
		   
	
	@Override
	public void robotInit() {
		m_myRobot = new DifferentialDrive(m_right, m_left);
		chooser.addDefault("Default Auto", defaultAuto);
		chooser.addObject("My Auto", customAuto);
		SmartDashboard.putData("Auto choices", chooser);
		c.setClosedLoopControl(true);
		leftOut = 0;
		rightOut = 0;
		

		
		
		
		  
	}
	@Override
	public void autonomousInit() {
			autoDriveCount = 0;
		}
		

/***************************************************************************** 
* This function is called periodically during autonomous
*******************************************************************************/

	@Override
	public void autonomousPeriodic() {
		autoDriveCount++;
		if(autoDriveCount < 700)
		{
			m_myRobot.tankDrive(0.5, 0.5);
		}
	}


	@Override
	public void teleopPeriodic() {
		m_myRobot.tankDrive(leftDrive, rightDrive);
		if(driveStick.getRawAxis(3) > 0.2) {
			m_midright.configOpenloopRamp(0, 20);
			m_frontright.configOpenloopRamp(0, 20);
			m_rearright.configOpenloopRamp(0, 20);
			
			m_midleft.configOpenloopRamp(0, 20);
			m_frontleft.configOpenloopRamp(0, 20);
			m_rearleft.configOpenloopRamp(0, 20);
			
		}
		else {
			m_midright.configOpenloopRamp(0.25, 20);
			m_frontright.configOpenloopRamp(0.25, 20);
			m_rearright.configOpenloopRamp(0.25, 20);
			
			m_midleft.configOpenloopRamp(0.25, 20);
			m_frontleft.configOpenloopRamp(0.25, 20);
			m_rearleft.configOpenloopRamp(0.25, 20);
			
		}
		
		
		/******************************************
		 * Pneumatics
		 ******************************************/
		if (driveStick.getRawButton(5)) {
			exampleDouble.set(DoubleSolenoid.Value.kForward);
			valve1 = 1;
		}
		else {
			valve1 = 0;
		}
		if (driveStick.getRawButton(6)){
			exampleDouble.set(DoubleSolenoid.Value.kReverse);
			valve2 = 1;
		}
		else {
			valve2 = 0;
		}
		
		if (valve1 == 0 && valve2 == 0) {
			exampleDouble.set(DoubleSolenoid.Value.kOff);
		}
		/******************************************
		 * climb && intake
		 ******************************************/

			m_intakeR.set(-intakeRight);
			m_intakeL.set(intakeLeft);
		
		if (operatorStick.getRawButton(1)) {
		m_lift.set(1);
		}
		else if(operatorStick.getRawButton(2)){
			m_lift.set(-1);
		}
		else {
			m_lift.set(0);
		}
		
		
		/******************************************
		 * lift
		 ******************************************/
		if(driveStick.getRawButton(2)) {
		if (driveStick.getRawButton(4)) {
		m_climb.set(-driveStick.getRawAxis(3));
		}
		else if (driveStick.getRawButton(2)){
			m_climb.set(driveStick.getRawAxis(3));
		}
		} 
		/******************************************
		 * Deadzones
		 ******************************************/
		if (driveStick.getRawAxis(1) >= 0.2 || driveStick.getRawAxis(1) <= -0.2) {
			leftDrive = driveStick.getRawAxis(1);
		}
		else {
			leftDrive = 0;
		}
		
		if (driveStick.getRawAxis(5) >= 0.2 || driveStick.getRawAxis(5) <= -0.2) {
			rightDrive = driveStick.getRawAxis(5);
		}
		else {
			rightDrive = 0;
		}
		
		if (operatorStick.getRawAxis(1) >= 0.2 || operatorStick.getRawAxis(1) <= -0.2) {
			intakeLeft = operatorStick.getRawAxis(1);
		}
		else {
			intakeLeft = 0;
		}
		if (operatorStick.getRawAxis(1) >= 0.2 || operatorStick.getRawAxis(1) <= -0.2) {
			intakeRight = operatorStick.getRawAxis(1);
		}
		else {
			intakeRight = 0;
		}
}
}
